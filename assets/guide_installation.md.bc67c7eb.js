import{_ as e,o as a,c as t,X as s}from"./chunks/framework.6e839c56.js";const m=JSON.parse('{"title":"Installation","description":"","frontmatter":{},"headers":[],"relativePath":"guide/installation.md","filePath":"guide/installation.md","lastUpdated":1692634499000}'),o={name:"guide/installation.md"},n=s('<h1 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-label="Permalink to &quot;Installation&quot;">​</a></h1><h3 id="installing-via-npm" tabindex="-1">Installing via NPM <a class="header-anchor" href="#installing-via-npm" aria-label="Permalink to &quot;Installing via NPM&quot;">​</a></h3><p>The library is available <a href="https://www.npmjs.com/package/dataclass" target="_blank" rel="noreferrer">in NPM registry</a> and can be installed via NPM or similar package manager:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dataclass</span></span></code></pre></div><h3 id="installing-via-cdns" tabindex="-1">Installing via CDNs <a class="header-anchor" href="#installing-via-cdns" aria-label="Permalink to &quot;Installing via CDNs&quot;">​</a></h3><p>The library can be imported via <a href="https://unpkg.com/" target="_blank" rel="noreferrer">UNPKG</a>. It is recommended to use <code>?module</code> parameter to import ES Module version of the code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://unpkg.com/dataclass@2?module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><em>Note: the library does not support <a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">UMD</a> format.</em></p><p>In similar way, the library can be imported via <a href="http://esm.sh/" target="_blank" rel="noreferrer">esm.sh</a>. This can be useful for <a href="https://deno.land/" target="_blank" rel="noreferrer">Deno</a> since this CDN also serves <code>.d.ts</code> files.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://esm.sh/dataclass@2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><em>Note: it is preferable to put explicit version range in the URL.</em></p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p>The library is shipped with CommonJS and ES Module support. The source code is written using ES2015 features. Given <a href="https://caniuse.com/es6-class" target="_blank" rel="noreferrer">the global reach</a> of ES2015 Classes it is very likely you won&#39;t need to compile this type of things. If the environments you are targetting support these features or you know for sure that a node module will be properly pre-compiled if necessary, you can skip the rest of this guide.</p><p>If older standards support required, the bundler of choice needs to be configured to transpile <code>dataclass</code> dependency as well. Assuming you would like to use <code>dataclass</code> for its typings benefits, you already have the build step in your environment.</p><h3 id="using-with-parcel-or-vite" tabindex="-1">Using with Parcel or Vite <a class="header-anchor" href="#using-with-parcel-or-vite" aria-label="Permalink to &quot;Using with Parcel or Vite&quot;">​</a></h3><p>Parcel is capable of properly transpiling <code>node_modules</code> and relies on Browserslist to figure stuff. Make sure you have <code>browserslist</code> defined. Read more <a href="https://parceljs.org/getting-started/webapp/#declaring-browser-targets" target="_blank" rel="noreferrer">in Parcel docs</a>.</p><p>Vite has a special way to handle dependencies transpiling. Read more <a href="https://vitejs.dev/guide/dep-pre-bundling.html" target="_blank" rel="noreferrer">in the related guide</a>.</p><h3 id="using-with-create-react-app" tabindex="-1">Using with Create React App <a class="header-anchor" href="#using-with-create-react-app" aria-label="Permalink to &quot;Using with Create React App&quot;">​</a></h3><p>Create React App transpiles <code>node_modules</code> as a part of the build pipeline and relies on Browserslist to figure what to transpile. Make sure you have <code>browserslist</code> properly configured. Read more <a href="https://create-react-app.dev/docs/supported-browsers-features/#configuring-supported-browsers" target="_blank" rel="noreferrer">in CRA docs</a>.</p><h3 id="using-with-webpack-babel" tabindex="-1">Using with Webpack &amp; Babel <a class="header-anchor" href="#using-with-webpack-babel" aria-label="Permalink to &quot;Using with Webpack &amp; Babel&quot;">​</a></h3><p>It is very likely, that your webpack config excludes <code>node_modules</code> from running through <code>babel-loader</code> for the sake of faster builds. If any of your targeted environments require code transpiling to ES5 (e.g. Internet Explorer 11), the config will require some changes to make it work with <code>dataclass</code> (and possibly other dependencies that are published as a modern JS code).</p><h4 id="explicit-targets-including-approach" tabindex="-1">Explicit targets including approach <a class="header-anchor" href="#explicit-targets-including-approach" aria-label="Permalink to &quot;Explicit targets including approach&quot;">​</a></h4><p>The easiest way to extend your existing webpack config to transpile certain node_modules using <code>babel-loader</code> is to explicitly mention them in <code>include</code> property corresponding rule.</p><p><em>Note: this change can be applied to production config only.</em></p><h4 id="basic-dependencies-transpiling-approach" tabindex="-1">Basic dependencies transpiling approach <a class="header-anchor" href="#basic-dependencies-transpiling-approach" aria-label="Permalink to &quot;Basic dependencies transpiling approach&quot;">​</a></h4><p>While the previous approach easily works for <code>dataclass</code> and in no way affects the build time, there is another approach you may consider, that will potentially help you with other dependecies.</p><p><em>Note: this change can be applied to production config only.</em></p>',27),r=[n];function l(i,p,c,d,h,u){return a(),t("div",null,r)}const b=e(o,[["render",l]]);export{m as __pageData,b as default};
