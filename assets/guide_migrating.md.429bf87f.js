import{_ as e,o as s,c as a,X as n}from"./chunks/framework.6e839c56.js";const m=JSON.parse('{"title":"Migrating from v1 to v2","description":"","frontmatter":{},"headers":[],"relativePath":"guide/migrating.md","filePath":"guide/migrating.md","lastUpdated":1692634499000}'),t={name:"guide/migrating.md"},o=n(`<h1 id="migrating-from-v1-to-v2" tabindex="-1">Migrating from v1 to v2 <a class="header-anchor" href="#migrating-from-v1-to-v2" aria-label="Permalink to &quot;Migrating from v1 to v2&quot;">​</a></h1><h2 id="the-class-name-and-import-type-has-been-changed" tabindex="-1">The class name and import type has been changed <a class="header-anchor" href="#the-class-name-and-import-type-has-been-changed" aria-label="Permalink to &quot;The class name and import type has been changed&quot;">​</a></h2><p>The library was created in 2017, long ago before <a href="https://github.com/tc39/proposal-record-tuple" target="_blank" rel="noreferrer">Records &amp; Tuples proposal</a> was created. The fact this proposal is moving towards being a part of the language means &quot;Record&quot; as a term gains very particular meaning for the ecosystem. Besides, <a href="https://immutable-js.com/docs/v4.0.0/Record/" target="_blank" rel="noreferrer"><code>Immutable.Record</code></a> and <a href="https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeys-type" target="_blank" rel="noreferrer">TypeScript&#39;s Record</a> could potentially create confusion as well. Thus, the abstract class <code>Record</code> has been renamed to <code>Data</code>.</p><p>Dataclass v1 exposed a single default export which seemed to work just fine for most of the cases. However, it can create additional burden for CommonJS code and require some unnecessary tricks from the bundlers. Thus, Dataclass v2 uses named export.</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">import Record from &quot;dataclass&quot;;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import { Data } from &quot;dataclass&quot;;</span></span></code></pre></div><h2 id="drop-typescript-generic-from-class-definitions" tabindex="-1">Drop TypeScript generic from class definitions <a class="header-anchor" href="#drop-typescript-generic-from-class-definitions" aria-label="Permalink to &quot;Drop TypeScript generic from class definitions&quot;">​</a></h2><p>Dataclass v1 required TypeScript classes to be generic due to <a href="https://github.com/Microsoft/TypeScript/issues/5863" target="_blank" rel="noreferrer">polymorphic <code>this</code> for static members issue</a>. The issue has not been resolved but in Dataclass v2 there was a change in typings that helped avoiding the issue in the first place. Now, the user&#39;s classes don&#39;t need to be generic.</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">class User extends Record&lt;User&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">class User extends Data {</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: string = &quot;Anon&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><h2 id="use-static-method-create-instead-of-new-operator" tabindex="-1">Use static method <code>create()</code> instead of <code>new</code> operator <a class="header-anchor" href="#use-static-method-create-instead-of-new-operator" aria-label="Permalink to &quot;Use static method \`create()\` instead of \`new\` operator&quot;">​</a></h2><p>Dataclass v2 uses new implementation for class instantiation due to some browser incompatibilities.</p><div class="language-diff"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">let user = new User({ name: &quot;Ann&quot; });</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">let user = User.create({ name: &quot;Ann&quot; });</span></span></code></pre></div><p>Moving to dataclass v2 will make use of <code>new</code> operator throwing runtime errors, suggesting to use static <code>create()</code> method instead.</p><h2 id="ensure-no-mutations-happening-in-the-code" tabindex="-1">Ensure no mutations happening in the code <a class="header-anchor" href="#ensure-no-mutations-happening-in-the-code" aria-label="Permalink to &quot;Ensure no mutations happening in the code&quot;">​</a></h2><p>While instance of data classes treated as immutable, the implementation still uses some safety precautions to ensure no mutations (accidental or intentional) can be made. In v1, when a prop is mutated, nothing happens, the value remains the same. The operation is basically ignored.</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// &gt; 18</span></span></code></pre></div><p>In v2, however, some additional precautions were made, to ensure that developers can spot bad code and mistakes. Mutating a property will now throw an error:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Uncaught TypeError: &quot;age&quot; is read-only</span></span></code></pre></div><p>This error comes from the use of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze" target="_blank" rel="noreferrer"><code>Object.freeze()</code></a> which throws an error when there was an attempt to mutate an existing property and when the user tries to add new property to the object.</p><h2 id="make-sure-the-dependency-is-transpiled-if-necessary" tabindex="-1">Make sure the dependency is transpiled, if necessary <a class="header-anchor" href="#make-sure-the-dependency-is-transpiled-if-necessary" aria-label="Permalink to &quot;Make sure the dependency is transpiled, if necessary&quot;">​</a></h2><p>See <a href="./installation.html#troubleshooting">Installation Guide &amp; Troubleshooting</a> for more details.</p>`,20),r=[o];function l(p,c,i,d,h,y){return s(),a("div",null,r)}const g=e(t,[["render",l]]);export{m as __pageData,g as default};
